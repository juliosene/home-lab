version: '3.8'

services:
  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: Yt6Gh9kLm2Np3Qw8XvTyJr5B
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - kong-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

#   Remove the migration service after the first successful run
  kong-migration:
    image: kong:latest
    command: kong migrations bootstrap
    environment:
     KONG_DATABASE: postgres
     KONG_PG_HOST: kong-database
     KONG_PG_PASSWORD: Yt6Gh9kLm2Np3Qw8XvTyJr5B
       KONG_CASSANDRA_CONTACT_POINTS: kong-database
     networks:
       - kong-network
     depends_on:
       - kong-database

  kong:
    image: kong:latest
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: Yt6Gh9kLm2Np3Qw8XvTyJr5B
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8100:8000"  # Port for incoming HTTP requests (consumers)
      - "8443:8443"  # Port for incoming HTTPS requests (consumers)
      - "8001:8001"  # Port for accessing the Kong Admin API (HTTP)
      - "8444:8444"  # Port for accessing the Kong Admin API (HTTPS)
    networks:
      - kong-network
    depends_on:
      - kong-database
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  konga:
    image: pantsel/konga:latest
    environment:
      NODE_ENV: production
    ports:
      - "1337:1337"
    networks:
      - kong-network
    depends_on:
      - kong
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

networks:
  kong-network:
    driver: overlay

volumes:
  kong_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /docker/swarmfs/kong/kong_data/